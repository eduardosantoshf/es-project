"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5533],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),d=l(n),m=o,h=d["".concat(s,".").concat(m)]||d[m]||u[m]||a;return n?r.createElement(h,i(i({ref:t},p),{},{components:n})):r.createElement(h,i({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:o,i[1]=c;for(var l=2;l<a;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},726:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>c,toc:()=>l});var r=n(7462),o=(n(7294),n(3905));const a={sidebar_position:1},i="CI/CD",c={unversionedId:"documentation/ci-cd",id:"documentation/ci-cd",title:"CI/CD",description:"Testing",source:"@site/docs/documentation/ci-cd.md",sourceDirName:"documentation",slug:"/documentation/ci-cd",permalink:"/es-project/documentation/ci-cd",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/documentation/ci-cd.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Cliping an intrusion",permalink:"/es-project/documentation/cameras/cliping-intrusion"},next:{title:"Client Web UI",permalink:"/es-project/category/client-web-ui"}},s={},l=[{value:"Testing",id:"testing",level:2},{value:"Code Coverage",id:"code-coverage",level:2}],p={toc:l};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"cicd"},"CI/CD"),(0,o.kt)("h2",{id:"testing"},"Testing"),(0,o.kt)("p",null,"To implement correctly DevOps practices and methodologies, we developed multiple workflows on the GitHub platform. Each one of this workflows is specific to a microservice, separating its CI/CD logic and properties."),(0,o.kt)("p",null,"Taking as an example the Human Detection service and looking at the ",(0,o.kt)("inlineCode",{parentName:"p"},"human-detection.yaml")," file, we have on the sonar job, the following step:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"- name: Install tox and any other packages\n    run: pip install tox\n- name: Run tox\n    run: tox -e py\n")),(0,o.kt)("p",null,"On this step, we use the  Tox tool, a python test wrapper which allows us to configure the tests made by the ",(0,o.kt)("a",{parentName:"p",href:"https://docs.pytest.org/en/7.1.x/"},"pytest")," testing tool. This tool integrated with SonarCloud scan gives us the code coverage of the service."),(0,o.kt)("h2",{id:"code-coverage"},"Code Coverage"),(0,o.kt)("p",null,"Using the ",(0,o.kt)("a",{parentName:"p",href:"https://www.sonarsource.com/products/sonarcloud/"},"SonarCloud")," code coverage service, we can see the % of code which is covered by test, plus checking bugs and security vulnerabilities, code smells, etc. "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"}," - name: SonarCloud Scan\n    uses: SonarSource/sonarcloud-github-action@master\n    env:\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # needed to get PR information, if any\n        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_HUMAN_DETECTION }}\n    with:\n        projectBaseDir: HumanDetection/\n")),(0,o.kt)("p",null,"On the code portion above, the referred step performs the SonarCloud scan. It is worth to mention that, for the purpose of this project, we used a feature of SonarCloud called monorepo, this feature is used when we have the necessity to have multiple SonarCloud projects inside the same git repository. In our case, as we have a microservices architecture, this feature came in hand, because it allowed us to set a specific scan for each service, in its own programming language, frameworks, etc."),(0,o.kt)("p",null,"Still using the Human Detection service, we can check the code coverage scan results, accessing this ",(0,o.kt)("a",{parentName:"p",href:"https://sonarcloud.io/project/overview?id=es-project-human-detection"},"link"),"."))}u.isMDXComponent=!0}}]);